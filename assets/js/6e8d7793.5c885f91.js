"use strict";(self.webpackChunkheadless_doc=self.webpackChunkheadless_doc||[]).push([[7272],{3905:(e,t,n)=>{n.d(t,{Zo:()=>h,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},h=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,h=i(e,["components","mdxType","originalType","parentName"]),c=p(n),d=r,m=c["".concat(l,".").concat(d)]||c[d]||u[d]||o;return n?a.createElement(m,s(s({ref:t},h),{},{components:n})):a.createElement(m,s({ref:t},h))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[c]="string"==typeof e?e:r,s[1]=i;for(var p=2;p<o;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2390:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const o={slug:"/data-fetching/use-post-or-posts",sidebar_position:4},s="The usePostOrPosts hook",i={unversionedId:"Data Fetching/usePostOrPosts",id:"Data Fetching/usePostOrPosts",title:"The usePostOrPosts hook",description:"This hook was introduced in @headstartwp/core@1.1.0 and @headstartwp/next@1.1.0",source:"@site/documentation/02 - Data Fetching/usePostOrPosts.md",sourceDirName:"02 - Data Fetching",slug:"/data-fetching/use-post-or-posts",permalink:"/docs/learn/data-fetching/use-post-or-posts",draft:!1,editUrl:"https://github.com/10up/headstartwp/tree/trunk/docs/documentation/02 - Data Fetching/usePostOrPosts.md",tags:[],version:"current",lastUpdatedBy:"N\xedcholas Andr\xe9",lastUpdatedAt:1694478822,formattedLastUpdatedAt:"Sep 12, 2023",sidebarPosition:4,frontMatter:{slug:"/data-fetching/use-post-or-posts",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"The useAuthorArchive Hook",permalink:"/docs/learn/data-fetching/useauthorarchive"},next:{title:"The useTerms hook",permalink:"/docs/learn/data-fetching/useterms"}},l={},p=[{value:"Basic Usage",id:"basic-usage",level:2},{value:"Return values",id:"return-values",level:3},{value:"single and archive params",id:"single-and-archive-params",level:3},{value:"priority",id:"priority",level:3},{value:"routeMatchStrategy",id:"routematchstrategy",level:3}],h={toc:p};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"the-usepostorposts-hook"},"The usePostOrPosts hook"),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"This hook was introduced in ",(0,r.kt)("inlineCode",{parentName:"p"},"@headstartwp/core@1.1.0")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"@headstartwp/next@1.1.0"))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"The ",(0,r.kt)("a",{parentName:"p",href:"/api/modules/headstartwp_next#usepostorposts"},"usePostOrPosts")," hook is the Next.js binding for the ",(0,r.kt)("a",{parentName:"p",href:"/api/namespaces/headstartwp_core.react#usefetchpostorposts"},"useFetchPostOrPosts"),".")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"usePostOrPosts")," fetch either a single post or a collection of posts based on the current path. It is useful when you want to prefix the archive and the single posts with the same prefix. E.g: /blog/post-name and /blog/news"),(0,r.kt)("h2",{id:"basic-usage"},"Basic Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// src/pages/blog/[...path].js\n\nconst blogParams = {\n    single: {\n        postType: 'post',\n    },\n    archive: {\n        postType: 'post',\n        taxonomy: 'category',\n    },\n    priority: 'single',\n    routeMatchStrategy: 'single',\n};\n\nconst Archive = () => {\n    const { data } = usePosts(blogParams.archive);\n\n    return (\n        <>\n            <h1>Blog Page</h1>\n            <ul>\n                {data.posts.map((post) => (\n                    <li key={post.id}>\n                        <Link href={post.link}>{post.title.rendered}</Link>\n                    </li>\n                ))}\n            </ul>\n        </>\n    );\n};\n\nconst PageContent = ({ params }) => {\n    const { data } = usePost(params);\n\n    return (\n        <>\n            <h1>\n                <HtmlDecoder html={data.post.title.rendered} />\n            </h1>\n            <Blocks html={data.post.content.rendered} />\n        </>\n    );\n};\n\n\nconst BlogPage = () => {\n    const { isArchive } = usePostOrPosts(blogParams);\n\n    if (isArchive) {\n        return <Archive />;\n    }\n\n    return <PageContent params={blogParams.single} />;\n};\n\nexport async function getServerSideProps(context) {\n    try {\n        const settledPromises = await resolveBatch([\n            {\n                func: fetchHookData(usePostOrPosts.fetcher(), context, { params: blogParams }),\n            },\n        ]);\n\n        return addHookData(settledPromises, {});\n    } catch (e) {\n        return handleError(e, context);\n    }\n}\n")),(0,r.kt)("p",null,"The above route will match the following URLs:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"/blog/","[category]"),(0,r.kt)("li",{parentName:"ul"},"/blog/","[category]","/page/","[page]"),(0,r.kt)("li",{parentName:"ul"},"/blog/","[category]","/","[post-name]"," (this route will only work if the ",(0,r.kt)("inlineCode",{parentName:"li"},"post.link")," property matches this structure in WP)"),(0,r.kt)("li",{parentName:"ul"},"/blog/","[post-name]"," (this route will only work if the ",(0,r.kt)("inlineCode",{parentName:"li"},"post.link")," property matches this structure in WP)")),(0,r.kt)("h3",{id:"return-values"},"Return values"),(0,r.kt)("p",null,"This hook returns the following things:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"isArchive"),": true if the resulting data is for an archive"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"isSingle"),":  true if the resulting data is for a single post"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"post"),": if isSingle is true, will hold the data for a single post"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"posts"),": if isArchive is true, will hold the data for an archive")),(0,r.kt)("p",null,"When using the ",(0,r.kt)("inlineCode",{parentName:"p"},"usePostOrPosts")," hook you can also use ",(0,r.kt)("inlineCode",{parentName:"p"},"usePost")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"usePosts")," without needing to make additional fetch calls. The ",(0,r.kt)("inlineCode",{parentName:"p"},"usePostOrPosts")," hook will populate the cache for ",(0,r.kt)("inlineCode",{parentName:"p"},"usePost")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"usePosts"),". That is why in the example on the page, the actual data is pulled from ",(0,r.kt)("inlineCode",{parentName:"p"},"usePost")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"usePosts"),"."),(0,r.kt)("h3",{id:"single-and-archive-params"},"single and archive params"),(0,r.kt)("p",null,"The route above is going to try to fetch either a single post or a post archive based on the current URL. The parameters passed to ",(0,r.kt)("inlineCode",{parentName:"p"},"single")," are the ",(0,r.kt)("inlineCode",{parentName:"p"},"usePost")," parameters and the ",(0,r.kt)("inlineCode",{parentName:"p"},"archive")," params are the ",(0,r.kt)("inlineCode",{parentName:"p"},"usePosts")," params."),(0,r.kt)("h3",{id:"priority"},"priority"),(0,r.kt)("p",null,"The possible values for ",(0,r.kt)("inlineCode",{parentName:"p"},"priority")," are ",(0,r.kt)("inlineCode",{parentName:"p"},"single")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"archive"),". This setting exists to prioritize one strategy over the other when there are URL collisions. In the example on this page, there could be a slug collision where a post exists with the slug of a category. In that case, the ",(0,r.kt)("inlineCode",{parentName:"p"},"priority")," setting will dictate which one is going to be used."),(0,r.kt)("h3",{id:"routematchstrategy"},"routeMatchStrategy"),(0,r.kt)("p",null,"This setting controls whether ",(0,r.kt)("inlineCode",{parentName:"p"},"[...path].js")," should match the fetch strategy. The possible values are ",(0,r.kt)("inlineCode",{parentName:"p"},"none")," (default), ",(0,r.kt)("inlineCode",{parentName:"p"},"single"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"archive")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"both"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"single"),": Will only fetch a single post if ",(0,r.kt)("inlineCode",{parentName:"li"},"[...path].js")," matches the structure of a single."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"archive"),": Will only fetch an archive if ",(0,r.kt)("inlineCode",{parentName:"li"},"[...path].js")," matches the structure of an archive."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"both"),": Will only fetch a single and an archive if they both match the expected url structure."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"none"),": Does not perform any checks against ",(0,r.kt)("inlineCode",{parentName:"li"},"[...path].js"),".")),(0,r.kt)("p",null,"As an example, if you are trying to have ",(0,r.kt)("inlineCode",{parentName:"p"},"/blog")," fetch the latest posts and ",(0,r.kt)("inlineCode",{parentName:"p"},"/blog/post-name")," fetch a single post and set ",(0,r.kt)("inlineCode",{parentName:"p"},"routeMatchStrategy")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"archive"),", the ",(0,r.kt)("inlineCode",{parentName:"p"},"/blog")," route will never work."))}c.isMDXComponent=!0}}]);