"use strict";(self.webpackChunkheadless_doc=self.webpackChunkheadless_doc||[]).push([[3629],{3905:(t,e,n)=>{n.d(e,{Zo:()=>c,kt:()=>h});var a=n(7294);function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function r(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?r(Object(n),!0).forEach((function(e){o(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function l(t,e){if(null==t)return{};var n,a,o=function(t,e){if(null==t)return{};var n,a,o={},r=Object.keys(t);for(a=0;a<r.length;a++)n=r[a],e.indexOf(n)>=0||(o[n]=t[n]);return o}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(a=0;a<r.length;a++)n=r[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(o[n]=t[n])}return o}var s=a.createContext({}),u=function(t){var e=a.useContext(s),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},c=function(t){var e=u(t.components);return a.createElement(s.Provider,{value:e},t.children)},p="mdxType",m={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},d=a.forwardRef((function(t,e){var n=t.components,o=t.mdxType,r=t.originalType,s=t.parentName,c=l(t,["components","mdxType","originalType","parentName"]),p=u(n),d=o,h=p["".concat(s,".").concat(d)]||p[d]||m[d]||r;return n?a.createElement(h,i(i({ref:e},c),{},{components:n})):a.createElement(h,i({ref:e},c))}));function h(t,e){var n=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var r=n.length,i=new Array(r);i[0]=d;var l={};for(var s in e)hasOwnProperty.call(e,s)&&(l[s]=e[s]);l.originalType=t,l[p]="string"==typeof t?t:o,i[1]=l;for(var u=2;u<r;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6423:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var a=n(7462),o=(n(7294),n(3905));const r={slug:"/data-fetching/mutating",sidebar_position:9},i="Mutating Data",l={unversionedId:"Data Fetching/mutating",id:"Data Fetching/mutating",title:"Mutating Data",description:'It is possible to use the useSwr mutate function to mutate data on the client. The data-fetching hooks expose the "bound mutate" function from swr. Below is an example of optimistically updating the UI to like a post.',source:"@site/documentation/02 - Data Fetching/mutating.md",sourceDirName:"02 - Data Fetching",slug:"/data-fetching/mutating",permalink:"/docs/learn/data-fetching/mutating",draft:!1,editUrl:"https://github.com/10up/headstartwp/tree/trunk/docs/documentation/02 - Data Fetching/mutating.md",tags:[],version:"current",lastUpdatedBy:"N\xedcholas Andr\xe9",lastUpdatedAt:1711056403,formattedLastUpdatedAt:"Mar 21, 2024",sidebarPosition:9,frontMatter:{slug:"/data-fetching/mutating",sidebar_position:9},sidebar:"tutorialSidebar",previous:{title:"The useSeo hook",permalink:"/docs/learn/data-fetching/useSeo"},next:{title:"Creating your own custom hooks",permalink:"/docs/learn/data-fetching/creating-your-own-custom-hooks"}},s={},u=[],c={toc:u};function p(t){let{components:e,...n}=t;return(0,o.kt)("wrapper",(0,a.Z)({},c,n,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"mutating-data"},"Mutating Data"),(0,o.kt)("p",null,"It is possible to use the ",(0,o.kt)("a",{parentName:"p",href:"https://swr.vercel.app/docs/mutation"},"useSwr mutate"),' function to mutate data on the client. The data-fetching hooks expose the "bound mutate" function from swr. Below is an example of optimistically updating the UI to like a post.'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Example of liking a post logic would look like"',title:'"Example',of:!0,liking:!0,a:!0,post:!0,logic:!0,would:!0,look:!0,'like"':!0},"const LikePost = () => {\n    const { data, mutate } = usePost();\n\n    if (loading) {\n        return <Placeholder />\n    }\n\n    function like() {\n        if (!data) {\n            return;\n        }\n\n        // run an async function `makeRequestToLikePost` \n        // but update UI immediately with `optimisticData`\n        // once the async function resolves, \n        // it will revalidate the data from the server\n        // this assumes the next request to fetch the same post will \n        // return the updated count\n        mutate(() => makeRequestToLikePost(data.post.id), {\n            optimisticData: {\n                ...data.post,\n                meta: {\n                    ...data.post.meta,\n                    like_count: data.post.meta.like_count + 1\n                }\n            }\n        });\n    }\n    return <Heart count={data.post.meta.like_count} onClick={() => {like()}} />\n}\n")),(0,o.kt)("p",null,"In the example above we're assuming a post has a meta field called ",(0,o.kt)("inlineCode",{parentName:"p"},"like_count")," that holds the total number of likes the post has. When clicking the like button,\nit will issue a remote fetch call to run the mutation on the server but update the UI immediately with `optimisticData``."),(0,o.kt)("p",null,"Once the remote mutation finishes running, another request will be issued by the framework to re-fetch the post, which we assume, will already have the updated ",(0,o.kt)("inlineCode",{parentName:"p"},"like_count"),"."),(0,o.kt)("p",null,"If for some reason, anything fails with the remote mutation, when revalidating the data will roll back to the previous value."))}p.isMDXComponent=!0}}]);