"use strict";(self.webpackChunkheadless_doc=self.webpackChunkheadless_doc||[]).push([[5182],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>m});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),p=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(a),d=r,m=u["".concat(l,".").concat(d)]||u[d]||h[d]||o;return a?n.createElement(m,i(i({ref:t},c),{},{components:a})):n.createElement(m,i({ref:t},c))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},288:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var n=a(7462),r=(a(7294),a(3905));const o={slug:"/data-fetching/useposts",sidebar_position:2},i="The usePosts hook",s={unversionedId:"Data Fetching/usePosts",id:"Data Fetching/usePosts",title:"The usePosts hook",description:"The usePosts hook is the Next.js binding for the useFetchPosts.",source:"@site/documentation/02 - Data Fetching/usePosts.md",sourceDirName:"02 - Data Fetching",slug:"/data-fetching/useposts",permalink:"/docs/learn/data-fetching/useposts",draft:!1,editUrl:"https://github.com/10up/headstartwp/tree/trunk/docs/documentation/02 - Data Fetching/usePosts.md",tags:[],version:"current",lastUpdatedBy:"N\xedcholas Andr\xe9",lastUpdatedAt:1713384540,formattedLastUpdatedAt:"Apr 17, 2024",sidebarPosition:2,frontMatter:{slug:"/data-fetching/useposts",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"The usePost hook",permalink:"/docs/learn/data-fetching/usepost"},next:{title:"The useAuthorArchive Hook",permalink:"/docs/learn/data-fetching/useauthorarchive"}},l={},p=[{value:"Basic Usage",id:"basic-usage",level:2},{value:"Queried Object",id:"queried-object",level:2},{value:"Category Archive",id:"category-archive",level:2},{value:"Archive Path Matching",id:"archive-path-matching",level:2},{value:"Known limitations",id:"known-limitations",level:2}],c={toc:p};function u(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"the-useposts-hook"},"The usePosts hook"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"The ",(0,r.kt)("a",{parentName:"p",href:"/api/modules/headstartwp_next#useposts"},"usePosts")," hook is the Next.js binding for the ",(0,r.kt)("a",{parentName:"p",href:"/api/namespaces/headstartwp_core.react#usefetchposts"},"useFetchPosts"),".")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"usePosts")," hook fetches a collection of WordPress posts from a registered post type. Its basic usage is very simple."),(0,r.kt)("h2",{id:"basic-usage"},"Basic Usage"),(0,r.kt)("p",null,"Assuming a ",(0,r.kt)("inlineCode",{parentName:"p"},"src/pages/blog/[[...path]].js")," route with the following content."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"This example is using the optional catch-all route ",(0,r.kt)("inlineCode",{parentName:"p"},"[[..path]].js")," because we want the ",(0,r.kt)("inlineCode",{parentName:"p"},"/blog")," route to be handled by the same file.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="src/pages/blog/[[...path]].js"',title:'"src/pages/blog/[[...path]].js"'},"import { usePost } from '@headstartwp/next';\n\nconst ArchivePage = () => {\n    const { loading, error, data } = usePosts({ per_page: 10 });\n\n    if (loading) {\n        return 'Loading...';\n    }\n\n    if (error) {\n        return 'error...';\n    }\n\n    return (\n        <div>\n            {data?.posts?.map((post) => (\n                <h2 key={post.id}>{post.title.rendered}</h2>\n            ))}\n        </div>\n    );\n};\n")),(0,r.kt)("p",null,"The route will automatically render the latest 10 posts and you get pagination, category, tags and custom taxonomies filtering for free as the following paths will automatically map URL segments into REST API requests:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"/blog/page/2"),(0,r.kt)("li",{parentName:"ul"},"/blog/category/category-name"),(0,r.kt)("li",{parentName:"ul"},"/blog/tag/tag-name"),(0,r.kt)("li",{parentName:"ul"},"/blog/category/category-name/page/2")),(0,r.kt)("h2",{id:"queried-object"},"Queried Object"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"usePosts")," hook exposes a ",(0,r.kt)("inlineCode",{parentName:"p"},"queriedObject"),". It's similar to WordPress ",(0,r.kt)("a",{parentName:"p",href:"https://developer.wordpress.org/reference/functions/get_queried_object/"},"get_queried_object()")," function."),(0,r.kt)("p",null,"It essentially returns what's being queried for, e.g., author or category. If the current page is querying posts within a certain author, then that author object will be populated in ",(0,r.kt)("inlineCode",{parentName:"p"},"data.queriedObject.author"),". Similarly, if the current page is querying posts from a given category ",(0,r.kt)("inlineCode",{parentName:"p"},"data.queriedObject.term")," will be populated with that category."),(0,r.kt)("p",null,"Example: "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// category-name can either come from the URL or be manually specified.\nconst { data } = usePosts({ taxonomy: 'category', category: 'cat-name' });\n\nreturn (\n    <h1>Category Page: {data.queriedObject.term.name}</h1>\n);\n")),(0,r.kt)("h2",{id:"category-archive"},"Category Archive"),(0,r.kt)("p",null,"You can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"usePosts")," hook to create a category archive route (",(0,r.kt)("inlineCode",{parentName:"p"},"src/pages/category/[...path].js"),")."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"We use ",(0,r.kt)("inlineCode",{parentName:"p"},"[...path].js")," here because ",(0,r.kt)("strong",{parentName:"p"},"we do not want")," the ",(0,r.kt)("inlineCode",{parentName:"p"},"/category")," route to render anything.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="src/pages/category/[...path].js"',title:'"src/pages/category/[...path].js"'},"import {\n    usePosts,\n    fetchHookData,\n    addHookData,\n    handleError,\n} from '@headstartwp/next';\n\nconst CategoryPage = () => {\n    const { data } = usePosts({ taxonomy: 'category' });\n\n    return (\n        <>\n            <h1>Category Page: {data.queriedObject.term.name}</h1>\n            <ul>\n                {data.posts.map((post) => (\n                    <li key={post.id}>\n                        <Link href={post.link}>{post.title.rendered}</Link>\n                    </li>\n                ))}\n            </ul>\n            <Pagination pageInfo={data.pageInfo} />\n        </>\n    );\n};\n")),(0,r.kt)("h2",{id:"archive-path-matching"},"Archive Path Matching"),(0,r.kt)("p",null,"When using ",(0,r.kt)("inlineCode",{parentName:"p"},"usePosts"),' to create archive pages (e.g. a category archive) you can optionally enable "archive path matching" to ensure that your archive routes match the expected permalink dictated by WordPress. Without "archive path matching", your archive routes would match as long as the last segment of the url is a valid term slug. '),(0,r.kt)("p",null,"For instance, let's take the  ",(0,r.kt)("inlineCode",{parentName:"p"},"/category/[...path].js")," route above. It will match URLs like:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"/category/cat-name"),(0,r.kt)("li",{parentName:"ul"},"/category/parent-cat-name/cat-name")),(0,r.kt)("p",null,"The framework, however, does not check if ",(0,r.kt)("inlineCode",{parentName:"p"},"parent-cat-name")," is the de facto parent of cat-name, and even worse, it has no way to know (without additional rest api calls) if ",(0,r.kt)("inlineCode",{parentName:"p"},"parent-cat-name")," is even a valid category."),(0,r.kt)("p",null,"To address this, you can pass ",(0,r.kt)("inlineCode",{parentName:"p"},"matchArchivePath")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"usePosts")," to tell the framework to check the ",(0,r.kt)("inlineCode",{parentName:"p"},"link")," property of the ",(0,r.kt)("inlineCode",{parentName:"p"},"queriedObject"),", i.e if the ",(0,r.kt)("inlineCode",{parentName:"p"},"link")," property of ",(0,r.kt)("inlineCode",{parentName:"p"},"cat-name")," returned by the ",(0,r.kt)("a",{parentName:"p",href:"https://developer.wordpress.org/rest-api/reference/categories/#schema"},"WordPress REST API")," matches the front-end path."),(0,r.kt)("p",null,"This setting can also be enabled in ",(0,r.kt)("inlineCode",{parentName:"p"},"headstartwp.config.js")," globally."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="headstartwp.config.js"',title:'"headstartwp.config.js"'},"module.exports = {\n    // enable archive path mapping for all default taxonomies\n    customTaxonomies: (defaultTaxonomies) => {\n        return defaultTaxonomies.map((taxonomy) => ({ ...taxonomy, matchArchivePath: true })),\n    },\n}\n")),(0,r.kt)("h2",{id:"known-limitations"},"Known limitations"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"It is not possible to fetch posts from more than one post type.")))}u.isMDXComponent=!0}}]);